- name: Pull Docker images and run containers for frontend, backend, and MongoDB
  hosts: all
  become: true
  vars:
    mongo_data_volume: mongo_data
    bind_mount_src: /etc/ssl/data_board
    bind_mount_dst: /etc/ssl/data_board
  tasks:
    - name: Set default values if variables are not defined
      set_fact:
        BACKEND_IMAGE: "{{ BACKEND_IMAGE | default('ghcr.io/paulscherrerinstitute/data_board_backend:latest') }}"
        FRONTEND_IMAGE: "{{ FRONTEND_IMAGE | default('ghcr.io/paulscherrerinstitute/data_board_frontend:latest') }}"
        MONGO_IMAGE: "{{ MONGO_IMAGE | default('mongo:latest') }}"
        FRONTEND_PORT: "{{ FRONTEND_PORT | default(80) }}"
        MONGO_DB_NAME: "{{ MONGO_DB_NAME | default('databoard') }}"

    - name: Create Docker network
      docker_network:
        name: data_board_network
        driver: bridge

    - name: Create Docker volume for MongoDB data persistence
      docker_volume:
        name: "{{ mongo_data_volume }}"

    - name: Try to pull MongoDB image (ignore if not found upstream)
      docker_image:
        name: "{{ MONGO_IMAGE }}"
        source: pull
        force_source: yes
      register: mongo_pull
      ignore_errors: yes

    - name: Ensure MongoDB image exists locally if pull failed
      docker_image:
        name: "{{ MONGO_IMAGE }}"
        source: local
        state: present
      when: mongo_pull is failed

    - name: Run MongoDB container
      docker_container:
        name: data_board_mongo
        image: "{{ MONGO_IMAGE }}"
        state: started
        restart_policy: unless-stopped
        env:
          MONGO_INITDB_DATABASE: "{{ MONGO_DB_NAME }}"
        networks:
          - name: data_board_network
        volumes:
          - "{{ mongo_data_volume }}:/data/db"

    - name: Try to pull backend image (ignore if not found upstream)
      docker_image:
        name: "{{ BACKEND_IMAGE }}"
        source: pull
        force_source: yes
      register: backend_pull
      ignore_errors: yes

    - name: Ensure backend image exists locally if pull failed
      docker_image:
        name: "{{ BACKEND_IMAGE }}"
        source: local
        state: present
      when: backend_pull is failed

    - name: Run backend container
      docker_container:
        name: data_board_backend
        image: "{{ BACKEND_IMAGE }}"
        state: started
        restart_policy: unless-stopped
        env:
          MONGO_HOST: "data_board_mongo"
          MONGO_PORT: "27017"
          MONGO_DB_NAME: "{{ MONGO_DB_NAME }}"
          SCHEMA_PATH: "{{ SCHEMA_PATH | default(omit) }}"
          ROOT_PATH: "/api"
        networks:
          - name: data_board_network

    - name: Try to pull frontend image (ignore if not found upstream)
      docker_image:
        name: "{{ FRONTEND_IMAGE }}"
        source: pull
        force_source: yes
      register: frontend_pull
      ignore_errors: yes

    - name: Ensure frontend image exists locally if pull failed
      docker_image:
        name: "{{ FRONTEND_IMAGE }}"
        source: local
        state: present
      when: frontend_pull is failed

    - name: Run frontend container
      docker_container:
        name: data_board_frontend
        image: "{{ FRONTEND_IMAGE }}"
        state: started
        restart_policy: unless-stopped
        env:
          DATA_BOARD_INTERNAL_BACKEND_URL: "http://data_board_backend:8080"
          DATA_BOARD_PUBLIC_BACKEND_URL: "/api"
        ports:
          - "{{ FRONTEND_PORT }}:80"
          - "443:443"
        networks:
          - name: data_board_network
        volumes:
          - "{{ bind_mount_src }}:{{ bind_mount_dst }}"
